{/* <Grid container>
          <Grid item xs={12}>
            <h1>Dashboard soon...</h1>

            <span>Charts: {this.props.dashboard.charts.length}</span>
            <span>Bars: {this.props.dashboard.bars.length}</span>
            <div>
              <TextField onChange={this.updateState} value={this.state.chartName} label="chart" />
              <Button onClick={this.addChart}>Add chart</Button>
            </div>
            <div>
              
            </div>
          </Grid>
        </Grid> */}


//import Button from '@material-ui/core/Button';
//import TextField from '@material-ui/core/TextField';

{
                bars: [{name: 'bar1'}, {name: 'bar2'}],
                charts: [{name: 'chart1'}, {name: 'chart1'}]
        }


          addChart = () => {
    const chart = { name: this.state.chartName};
    this.props.dispatch(addChart(chart));
    this.setState({ chartName: '' });
  }

  import { addChart, fetchDashboard } from '../../state/actions/DashboardActions';


  updateState = (event) => {
    const newState = {...this.state, chartName: event.target.value};
    this.setState(newState);
  }

  options={{
                maintainAspectRatio: true
              }}

      //console.log('render');
    // console.log('render: ',this.props.dashboard);
    //this.chartModelBuilder.build();
    // const data = {
    //   labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],
    //   datasets: [
    //     {
    //       label: 'My First dataset',
    //       backgroundColor: 'rgba(255,99,132,0.2)',
    //       borderColor: 'rgba(255,99,132,1)',
    //       borderWidth: 1,
    //       hoverBackgroundColor: 'rgba(255,99,132,0.4)',
    //       hoverBorderColor: 'rgba(255,99,132,1)',
    //       data: [65, 59, 80, 81, 56, 55, 40]
    //     }
    //   ]
    // };

            {/* <Input
            placeholder="enter a filter..."
            inputProps={{
            'aria-label': 'Description',
            }}
        /> */}

        //import Input from '@material-ui/core/Input';


          fetchComplete =(data) => {
    // const chartModel = this.chartModelBuilder.build(data.dashboard);
    // this.setState({
    //   chartModel
    // });
    this.updateChartModel(data.dashboard);
  }

      console.log('dashboard componentDidUpdate', prevProps.dashboard.charts, this.props.dashboard.charts);
    console.log(_.isEqual(prevProps.dashboard.charts, this.props.dashboard.charts));

    import React, { Component, Fragment } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { fetchDashboard } from '../../state/actions/DashboardActions';
import Grid from '@material-ui/core/Grid';
import { Bar, Radar, Pie } from 'react-chartjs-2';
import { ChartModelBuilder } from './ChartModelBuilder';
import _ from 'lodash';

class DashboardContainer extends Component {

  constructor(props){
    super(props);
    this.state = { 
      chartModel: {
        ventasAnuales:  { data: {}, options: {} },
        anulacionesMes: { data: {}, options: {} }, 
        mozoMes: { data: {}, options: {} }, 
        platoMes: { data: {}, options: {} } , 
        productosMes: { data: {}, options: {} }
      } 
    };
  }

  componentDidMount() {
    this.props.dispatch(fetchDashboard({}));
    this.chartModelBuilder = ChartModelBuilder();
  }

  componentDidUpdate(prevProps) {
    const dashboardUpdated = !_.isEqual(prevProps.dashboard.charts, this.props.dashboard.charts);
    if(dashboardUpdated) {
      this.updateChartModel(this.props.dashboard);
    }
  }

  updateChartModel = (dashboard) => {
    const chartModel = this.chartModelBuilder.build(dashboard);
    this.setState({
      chartModel
    });
  }

  render() {
    //console.log('render dashboard');
    const height = 140;
    const itemWitdh = 4;
    return (
      <Fragment>
        <Grid container spacing={0}>
          <Grid item xs={itemWitdh}>
              <Bar
              data={this.state.chartModel.mozoMes.data}
              height={height}
              options={this.state.chartModel.mozoMes.options}
            />
          </Grid>
           <Grid item xs={itemWitdh}>
              <Bar
              data={this.state.chartModel.ventasAnuales.data}
              height={height}
              options={this.state.chartModel.ventasAnuales.options} 
              />
          </Grid>
      </Fragment>
    );
  }
}

const mapStateToProps = state => {
  const { dashboard } = state;
  return {
    dashboard
  };
};

DashboardContainer.propTypes = {
  dashboard: PropTypes.object.isRequired,
  dispatch: PropTypes.func.isRequired
};

export default connect(mapStateToProps)(DashboardContainer);

// const asyncOperation = (filters) => { // eslint-disable-line no-unused-vars
//     return new Promise((resolve) => {
//         if(filters.year){
//             setTimeout(function(){ resolve(dashboardJson2); }, 100);
//         }else{
//             setTimeout(function(){ resolve(dashboardJson); }, 100);
//         }
//     });
// };

// export const fetchDashboard = filters => dispatch => {
//     return asyncOperation(filters).then(dashboard => dispatch(receiveDashboard(dashboard)));
// };

// import dashboardJson from '../../api/mocks/FullResponse';
// import dashboardJson2 from '../../api/mocks/FullResponse2';

 //this.props.appState.dashboardFilters
      //const filters = Object.assign({}, this.state.filters, filter);
      // this.setState({
      //   filters: filters
      // });

  "react-scripts": "1.1.4",

  {/* <TextField error={fieldHasError('userName')} label="User name" name="userName" className={classes.textField} margin="normal" helperText={errors.userName}
                value={values.userName}
                {...handlers}
              /> */}

              {/* <TextField error={fieldHasError('password')} type="password" label="Password" name="password" margin="normal" autoComplete="current-password" helperText={errors.password}
                className={classes.textField}
                value={values.password}
              /> */}